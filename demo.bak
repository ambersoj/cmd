#include "DCE.hpp"
#include <iostream>
#include <stdexcept>
#include <cstring>
#include <fcntl.h>
#include <linux/if.h>
#include <linux/if_tun.h>
#include <sys/ioctl.h>
#include <unistd.h>
#include <cstdlib>

// Function to create a TAP device
std::string createTapDevice(const std::string& tapName) {
    int tap_fd = open("/dev/net/tun", O_RDWR);
    if (tap_fd < 0) {
        throw std::runtime_error("Failed to open /dev/net/tun");
    }

    struct ifreq ifr = {};
    std::strncpy(ifr.ifr_name, tapName.c_str(), IFNAMSIZ);
    ifr.ifr_flags = IFF_TAP | IFF_NO_PI;

    if (ioctl(tap_fd, TUNSETIFF, &ifr) < 0) {
        close(tap_fd);
        throw std::runtime_error("Failed to create TAP device " + tapName);
    }

    // Bring the interface up
    std::string cmd = "ip link set " + tapName + " up";
    if (std::system(cmd.c_str()) != 0) {
        close(tap_fd);
        throw std::runtime_error("Failed to bring TAP device up");
    }

    std::cout << "Created TAP device: " << tapName << std::endl;
    return tapName;
}

int main() {
    try {
        std::string tap1 = createTapDevice("tap0");
        std::string tap2 = createTapDevice("tap1");

        DCE dce1(tap1);
        DCE dce2(tap2);

        dce1.startCapture();
        dce2.startCapture();

        std::cout << "DCE is running. Press Enter to exit..." << std::endl;
        std::cin.get();

        dce1.stopCapture();
        dce2.stopCapture();
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
        return EXIT_FAILURE;
    }
    return EXIT_SUCCESS;
}
